#!/usr/bin/env tsx
import { writeFileSync } from 'node:fs'
import { resolve } from 'node:path'
import { discoverPresentations } from './discover-presentations.js'

/**
 * Generates presentation data for the worker
 */
function generatePresentationData() {
	const presentations = discoverPresentations()
	
	const presentationData = presentations.map(p => ({
		id: p.id,
		title: p.title,
		description: p.description,
		author: p.author,
		keywords: p.keywords,
		theme: p.theme,
		url: `/talks/${p.id}/`,
		topics: p.keywords ? p.keywords.split(',').map(t => t.trim()) : []
	}))

	// Generate TypeScript file for the worker
	const tsContent = `// Auto-generated presentation data
// Do not edit this file manually - it's generated by scripts/generate-presentation-data.ts

export interface PresentationInfo {
	id: string
	title: string
	description?: string
	author?: string
	keywords?: string
	theme?: string
	url: string
	topics: string[]
}

export const presentations: PresentationInfo[] = ${JSON.stringify(presentationData, null, 2)}

export function findPresentationById(id: string): PresentationInfo | undefined {
	return presentations.find(p => p.id === id)
}

export function getPresentationRoutes(): string[] {
	return presentations.map(p => p.url)
}
`

	// Write to src/generated-presentations.ts
	const outputPath = resolve(process.cwd(), 'src/generated-presentations.ts')
	writeFileSync(outputPath, tsContent, 'utf-8')
	
	console.log(`📝 Generated presentation data for ${presentations.length} presentations`)
	console.log(`📍 Output: ${outputPath}`)
	
	return presentations
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
	generatePresentationData()
}

export { generatePresentationData }